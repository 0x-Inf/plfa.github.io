---
title     : "Stlc: The Simply Typed Lambda-Calculus"
layout    : page
permalink : /Stlc
---

This chapter defines the simply-typed lambda calculus.

## Imports
\begin{code}
open import Maps using (Id; id; _РЅЪ_; PartialMap; module PartialMap)
open PartialMap using (РѕЁ; _,_Рєд_)
open import Data.String using (String)
open import Data.Empty using (РіЦ; РіЦ-elim)
open import Data.Maybe using (Maybe; just; nothing)
open import Data.Nat using (РёЋ; suc; zero; _+_)
open import Data.Bool using (Bool; true; false; if_then_else_)
open import Relation.Nullary using (Dec; yes; no)
open import Relation.Nullary.Decidable using (Рїі_РїІ)
open import Relation.Binary.PropositionalEquality as P using (_РЅА_; _РЅб_; refl)
-- open import Relation.Binary.Core using (Rel)
-- open import Data.Product using (РѕЃ; Рѕё; _,_)
-- open import Function using (_Рѕў_; _$_)
\end{code}


## Syntax

Syntax of types and terms. All source terms are labeled with $рхђ$.

\begin{code}
infixr 100 _РЄњ_
infixl 100 _┬ирхђ_

data Type : Set where
  ­Юћ╣ : Type
  _РЄњ_ : Type Рєњ Type Рєњ Type

data Term : Set where
  varрхђ : Id Рєњ Term
  ╬╗рхђ_Рѕѕ_РЄњ_ : Id Рєњ Type Рєњ Term Рєњ Term
  _┬ирхђ_ : Term Рєњ Term Рєњ Term
  trueрхђ : Term
  falseрхђ : Term
  ifрхђ_then_else_ : Term Рєњ Term Рєњ Term Рєњ Term
\end{code}

Some examples.
\begin{code}
f x y : Id
f  =  id "f"
x  =  id "x"
y  =  id "y"

I[­Юћ╣] I[­Юћ╣РЄњ­Юћ╣] K[­Юћ╣][­Юћ╣] not[­Юћ╣] : Term 
I[­Юћ╣]  =  (╬╗рхђ x Рѕѕ ­Юћ╣ РЄњ (varрхђ x))
I[­Юћ╣РЄњ­Юћ╣]  =  (╬╗рхђ f Рѕѕ (­Юћ╣ РЄњ ­Юћ╣) РЄњ (╬╗рхђ x Рѕѕ ­Юћ╣ РЄњ ((varрхђ f) ┬ирхђ (varрхђ x))))
K[­Юћ╣][­Юћ╣]  =  (╬╗рхђ x Рѕѕ ­Юћ╣ РЄњ (╬╗рхђ y Рѕѕ ­Юћ╣ РЄњ (varрхђ x)))
not[­Юћ╣]  =  (╬╗рхђ x Рѕѕ ­Юћ╣ РЄњ (ifрхђ (varрхђ x) then falseрхђ else trueрхђ))
\end{code}

## Values

\begin{code}
data value : Term Рєњ Set where
  value-╬╗рхђ : Рѕђ {x A N} Рєњ value (╬╗рхђ x Рѕѕ A РЄњ N)
  value-trueрхђ : value (trueрхђ)
  value-falseрхђ : value (falseрхђ)
\end{code}

## Substitution

\begin{code}
_[_:=_] : Term Рєњ Id Рєњ Term Рєњ Term
(varрхђ xРђ▓) [ x := V ] with x РЅЪ xРђ▓
... | yes _ = V
... | no  _ = varрхђ xРђ▓
(╬╗рхђ xРђ▓ Рѕѕ AРђ▓ РЄњ NРђ▓) [ x := V ] with x РЅЪ xРђ▓
... | yes _ = ╬╗рхђ xРђ▓ Рѕѕ AРђ▓ РЄњ NРђ▓
... | no  _ = ╬╗рхђ xРђ▓ Рѕѕ AРђ▓ РЄњ (NРђ▓ [ x := V ])
(LРђ▓ ┬ирхђ MРђ▓) [ x := V ] =  (LРђ▓ [ x := V ]) ┬ирхђ (MРђ▓ [ x := V ])
(trueрхђ) [ x := V ] = trueрхђ
(falseрхђ) [ x := V ] = falseрхђ
(ifрхђ LРђ▓ then MРђ▓ else NРђ▓) [ x := V ] = ifрхђ (LРђ▓ [ x := V ]) then (MРђ▓ [ x := V ]) else (NРђ▓ [ x := V ])
\end{code}

## Reduction rules

\begin{code}
data _РЪ╣_ : Term Рєњ Term Рєњ Set where
  ╬▓РЄњ : Рѕђ {x A N V} Рєњ value V Рєњ
    ((╬╗рхђ x Рѕѕ A РЄњ N) ┬ирхђ V) РЪ╣ (N [ x := V ])
  ╬│РЄњРѓЂ : Рѕђ {L L' M} Рєњ
    L РЪ╣ L' Рєњ
    (L ┬ирхђ M) РЪ╣ (L' ┬ирхђ M)
  ╬│РЄњРѓѓ : Рѕђ {V M M'} Рєњ
    value V Рєњ
    M РЪ╣ M' Рєњ
    (V ┬ирхђ M) РЪ╣ (V ┬ирхђ M')
  ╬▓­Юћ╣РѓЂ : Рѕђ {M N} Рєњ
    (ifрхђ trueрхђ then M else N) РЪ╣ M
  ╬▓­Юћ╣Рѓѓ : Рѕђ {M N} Рєњ
    (ifрхђ falseрхђ then M else N) РЪ╣ N
  ╬│­Юћ╣ : Рѕђ {L L' M N} Рєњ
    L РЪ╣ L' Рєњ    
    (ifрхђ L then M else N) РЪ╣ (ifрхђ L' then M else N)
\end{code}

## Reflexive and transitive closure of a relation

\begin{code}
Rel : Set Рєњ SetРѓЂ
Rel A = A Рєњ A Рєњ Set

infixl 100 _>>_

data _* {A : Set} (R : Rel A) : Rel A where
  РЪеРЪЕ : Рѕђ {x : A} Рєњ (R *) x x
  РЪе_РЪЕ : Рѕђ {x y : A} Рєњ R x y Рєњ (R *) x y
  _>>_ : Рѕђ {x y z : A} Рєњ (R *) x y Рєњ (R *) y z Рєњ (R *) x z
\end{code}

\begin{code}
infix 80 _РЪ╣*_

_РЪ╣*_ : Term Рєњ Term Рєњ Set
_РЪ╣*_ = (_РЪ╣_) *
\end{code}

\begin{code}
open import Relation.Binary using (Preorder)

РЪ╣*-Preorder : Preorder _ _ _
РЪ╣*-Preorder = record
  { Carrier    = Term
  ; _РЅѕ_        = _РЅА_
  ; _Рѕ╝_        = _РЪ╣*_
  ; isPreorder = record
    { isEquivalence = P.isEquivalence
    ; reflexive     = ╬╗ {refl Рєњ РЪеРЪЕ}
    ; trans         = _>>_
    }
  }

open import Relation.Binary.PreorderReasoning РЪ╣*-Preorder
     using (begin_; _Рѕј) renaming (_РЅѕРЪе_РЪЕ_ to _РЅАРЪе_РЪЕ_; _Рѕ╝РЪе_РЪЕ_ to _РЪ╣*РЪе_РЪЕ_)
\end{code}

Example evaluation.

\begin{code}
exampleРѓђРђ▓ : not[­Юћ╣] ┬ирхђ trueрхђ РЪ╣* falseрхђ
exampleРѓђРђ▓ =
  begin
    not[­Юћ╣] ┬ирхђ trueрхђ
  РЪ╣*РЪе РЪе ╬▓РЄњ value-trueрхђ РЪЕ РЪЕ
    ifрхђ trueрхђ then falseрхђ else trueрхђ
  РЪ╣*РЪе РЪе ╬▓­Юћ╣РѓЂ РЪЕ РЪЕ
    falseрхђ
  Рѕј

exampleРѓђ : (not[­Юћ╣] ┬ирхђ trueрхђ) РЪ╣* falseрхђ
exampleРѓђ = РЪе stepРѓђ РЪЕ >> РЪе stepРѓЂ РЪЕ
  where
  MРѓђ MРѓЂ MРѓѓ : Term
  MРѓђ = (not[­Юћ╣] ┬ирхђ trueрхђ)
  MРѓЂ = (ifрхђ trueрхђ then falseрхђ else trueрхђ)
  MРѓѓ = falseрхђ
  stepРѓђ : MРѓђ РЪ╣ MРѓЂ
  stepРѓђ = ╬▓РЄњ value-trueрхђ
  stepРѓЂ : MРѓЂ РЪ╣ MРѓѓ
  stepРѓЂ = ╬▓­Юћ╣РѓЂ

exampleРѓЂ : (I[­Юћ╣РЄњ­Юћ╣] ┬ирхђ I[­Юћ╣] ┬ирхђ (not[­Юћ╣] ┬ирхђ falseрхђ)) РЪ╣* trueрхђ
exampleРѓЂ = РЪе stepРѓђ РЪЕ >> РЪе stepРѓЂ РЪЕ >> РЪе stepРѓѓ РЪЕ >> РЪе stepРѓЃ РЪЕ >> РЪе stepРѓё РЪЕ
  where
  MРѓђ MРѓЂ MРѓѓ MРѓЃ MРѓё MРѓЁ : Term
  MРѓђ = (I[­Юћ╣РЄњ­Юћ╣] ┬ирхђ I[­Юћ╣] ┬ирхђ (not[­Юћ╣] ┬ирхђ falseрхђ))
  MРѓЂ = ((╬╗рхђ x Рѕѕ ­Юћ╣ РЄњ (I[­Юћ╣] ┬ирхђ varрхђ x)) ┬ирхђ (not[­Юћ╣] ┬ирхђ falseрхђ))
  MРѓѓ = ((╬╗рхђ x Рѕѕ ­Юћ╣ РЄњ (I[­Юћ╣] ┬ирхђ varрхђ x)) ┬ирхђ (ifрхђ falseрхђ then falseрхђ else trueрхђ))
  MРѓЃ = ((╬╗рхђ x Рѕѕ ­Юћ╣ РЄњ (I[­Юћ╣] ┬ирхђ varрхђ x)) ┬ирхђ trueрхђ)
  MРѓё = I[­Юћ╣] ┬ирхђ trueрхђ
  MРѓЁ = trueрхђ
  stepРѓђ : MРѓђ РЪ╣ MРѓЂ
  stepРѓђ = ╬│РЄњРѓЂ (╬▓РЄњ value-╬╗рхђ)
  stepРѓЂ : MРѓЂ РЪ╣ MРѓѓ
  stepРѓЂ = ╬│РЄњРѓѓ value-╬╗рхђ (╬▓РЄњ value-falseрхђ)
  stepРѓѓ : MРѓѓ РЪ╣ MРѓЃ
  stepРѓѓ = ╬│РЄњРѓѓ value-╬╗рхђ ╬▓­Юћ╣Рѓѓ
  stepРѓЃ : MРѓЃ РЪ╣ MРѓё
  stepРѓЃ = ╬▓РЄњ value-trueрхђ         
  stepРѓё : MРѓё РЪ╣ MРѓЁ
  stepРѓё = ╬▓РЄњ value-trueрхђ         
\end{code}

## Type rules

\begin{code}
Context : Set
Context = PartialMap Type

infix 50 _Ріб_Рѕѕ_

data _Ріб_Рѕѕ_ : Context Рєњ Term Рєњ Type Рєњ Set where
  Ax : Рѕђ {╬Њ x A} Рєњ
    ╬Њ x РЅА just A Рєњ
    ╬Њ Ріб varрхђ x Рѕѕ A
  РЄњ-I : Рѕђ {╬Њ x N A B} Рєњ
    (╬Њ , x Рєд A) Ріб N Рѕѕ B Рєњ
    ╬Њ Ріб (╬╗рхђ x Рѕѕ A РЄњ N) Рѕѕ (A РЄњ B)
  РЄњ-E : Рѕђ {╬Њ L M A B} Рєњ
    ╬Њ Ріб L Рѕѕ (A РЄњ B) Рєњ
    ╬Њ Ріб M Рѕѕ A Рєњ
    ╬Њ Ріб L ┬ирхђ M Рѕѕ B
  ­Юћ╣-IРѓЂ : Рѕђ {╬Њ} Рєњ
    ╬Њ Ріб trueрхђ Рѕѕ ­Юћ╣
  ­Юћ╣-IРѓѓ : Рѕђ {╬Њ} Рєњ
    ╬Њ Ріб falseрхђ Рѕѕ ­Юћ╣
  ­Юћ╣-E : Рѕђ {╬Њ L M N A} Рєњ
    ╬Њ Ріб L Рѕѕ ­Юћ╣ Рєњ
    ╬Њ Ріб M Рѕѕ A Рєњ
    ╬Њ Ріб N Рѕѕ A Рєњ
    ╬Њ Ріб (ifрхђ L then M else N) Рѕѕ A    
\end{code}
