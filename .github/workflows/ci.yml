name: CI

on:
  push:
    branches:
      - dev
  pull_request:
    types:
      - opened
      - synchronize

env:
  CABAL_ARGS: "--project-file=cabal.project.ci"
  NOKOGIRI_USE_SYSTEM_LIBRARIES: true # Use fast system libraries for html-proofer.
  npm_config_yes: true # Don't ask for confirmation before installing packages.

jobs:
  build:
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        ghc-version: ["8.10.7"]
        cabal-version: ["3.6"]
        node-version: ["16"]
        include:
          - experimental: false
          - os: windows-latest
            experimental: true
          - os: ubuntu-latest
            os-pretty: Linux
          - os: macOS-latest
            os-pretty: macOS
          - os: windows-latest
            os-pretty: Windows

    name: Build on ${{ matrix.os-pretty }} with GHC ${{ matrix.ghc-version }}
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: 'true'

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: Setup EPUBCheck (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get install -y epubcheck

      - name: Setup EPUBCheck (macOS)
        if: runner.os == 'macOS'
        run: brew install epubcheck
        
      - name: Setup ICU4C (Windows)
        if: runner.os == 'Windows'
        run: vcpkg install icu
      #  run: |
      #    Invoke-WebRequest -Uri "https://github.com/unicode-org/icu/releases/download/release-71-1/icu4c-71_1-Win32-MSVC2019.zip" -OutFile "${{ runner.temp }}\icu4c.zip"
      #    Expand-Archive "${{ runner.temp }}\icu4c.zip" -DestinationPath "${{ github.workspace }}/icu4c/" -Force
      #    Copy-Item "${{ github.workspace }}\icu4c\bin\icuuc71.dll" -Destination "${{ github.workspace }}\icu4c\bin\icuuc.dll"
      #    Copy-Item "${{ github.workspace }}\icu4c\bin\icuin71.dll" -Destination "${{ github.workspace }}\icu4c\bin\icuin.dll"
      #    Copy-Item "${{ github.workspace }}\icu4c\bin\icudt71.dll" -Destination "${{ github.workspace }}\icu4c\bin\icudt.dll"
      #    Echo "CABAL_ARGS=$env:CABAL_ARGS --extra-lib-dirs=${{ github.workspace }}\icu4c\bin --extra-include-dirs=${{ github.workspace }}\icu4c\include" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      #    Echo "${{ github.workspace }}\icu4c\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: pwsh

      - name: Setup Haskell
        uses: haskell/actions/setup@v2
        id: setup-haskell
        with:
          ghc-version: ${{ matrix.ghc-version }}
          cabal-version: ${{ matrix.cabal-version }}

      - name: Cabal freeze
        run: |
          cabal v2-update
          cabal v2-freeze $CABAL_ARGS --enable-tests --enable-benchmarks
        shell: sh

      - name: Cache Haskell
        uses: actions/cache@v3
        with:
          path: |
            ${{ steps.setup-haskell.outputs.cabal-store }}
            dist-newstyle
          key: haskell-${{ matrix.os }}-${{ matrix.ghc-version }}-${{ hashFiles('cabal.project.ci.freeze') }}
          restore-keys: |
            haskell-${{ matrix.os }}-${{ matrix.ghc-version }}-
            ${{ matrix.os }}-GHC-${{ matrix.ghc-version }}-${{ hashFiles('cabal.project.ci.freeze') }}
            ${{ matrix.os }}-GHC-${{ matrix.ghc-version }}-
          
      - name: Cache Shake build
        uses: actions/cache@v3
        with:
          path: |
            _cache
            _site
          key: build-${{ matrix.os }}
          restore-keys: |
            ${{ matrix.os }}-output

      - name: Build artifact
        run: make build
        shell: sh

      - name: Test with HTML-validate
        run: make test-html-validate
        shell: sh

      - name: Test with HTMLProofer
        run: make test-html-proofer
        shell: sh

      - name: Test with EPUBCheck
        if: runner.os == 'Linux' || runner.os == 'macOS'
        run: make test-epubcheck
        shell: sh

      - name: Upload artifact
        if: runner.os == 'Linux' && github.event_name == 'push'
        uses: actions/upload-artifact@v3
        with:
          name: latest
          path: _site
          if-no-files-found: error
          
      - name: Upload artifact for pull request
        if: runner.os == 'Linux' && github.event_name == 'pull_request'
        uses: actions/upload-artifact@v3
        with:
          name: pull-request-${{ github.event.pull_request.number }} 
          path: _site
          if-no-files-found: error
          
  deploy:
    name: Deploy
    concurrency: ci-${{ github.ref }}
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        if: github.event_name == 'push'
        uses: actions/checkout@v3
        with:
          submodules: 'true'

      - name: Download artifact
        if: github.event_name == 'push'
        uses: actions/download-artifact@v3
        with:
          name: latest
          path: latest

      - name: Deploy artifact
        if: github.event_name == 'push'
        uses: JamesIves/github-pages-deploy-action@v4.3.3
        with:
          branch: web
          folder: latest
    


        
